3.1
INSTALAÇÃO CASSANDRA: https://phoenixnap.com/kb/install-cassandra-on-ubuntu?fbclid=IwAR3JSDigDPJRXHElhrLZFsdz_D_zsEGduW_f5e-YRpM45OQJULkHWKakBCQ

The hierarchy of elements in Cassandra is:

    Cluster
        Data center(s)
            Rack(s)
                Server(s)
                    Node (more accurately, a vnode)

                    HUMMMMM, INTERESTING -> https://stackoverflow.com/questions/28196440/what-are-the-differences-between-a-node-a-cluster-and-a-datacenter-in-a-cassand

cqlsh> CREATE KEYSPACE tutorial WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 3};
-> criação de um KEYSPACE
-> replication factor é o nr de nodes no cluster que vão receber uma cópia da informação (lembra-te que, de acordo com o que percebeste, a informação é guardada de forma redundante num "anel", é recuperada a informação
do nó que tiver sido atualizado mais "recentemente")
-> um replication factor de 1 significa que apenas há uma cópia de cada row no cluster, e de 2 significa que existe 2 cópias por cada row, em que cada cópia está num nó diferente
-> replica placement strategy é a estratégia utilizada para criar réplicas de informação e colocá-las ao longo do "anel"; neste caso, SimpleStrategy é rack-aware -> pelo que percebi é como se todo o mundo soubesse a "topologia" do cluster e toda a sua organização em "gavetas"

cqlsh> DESCRIBE keyspaces;
- mostra os keyspaces existentes, o meu está nesta linha:
system_auth  system_schema       system_views   tutorial

-> o que é durable writes?
- é uma opção para a criação do keyspace que por default está a true -> isto faz com que cada vez que haja um write request, a informação seja primeiro guardada numa estrutura em disco chamada "commitlog" e depois numa estrutura em memória chamada "memtable" -> se o node der restart, perde a informação dos memtables (estrutura em memória, REMEMBER), mas se a informação também estiver contida no commitlog ele consegue "reconstruir" a informação -> no fundo, serve para tornar a base de dados persistente

cqlsh> CREATE KEYSPACE test
... WITH REPLICATION = { 'class' : 'NetworkTopologyStrategy', 'datacenter1' : 3 }
... AND DURABLE_WRITES = false;
-> criação de um keyspace 
-> uma propriedade nova no REPLICATION: datacenter1 -> diz o nr de réplicas que quer do datacenter1 que é o nome do datacenter default do Cassandra
> durable_writes -> explicação mais acima

cqlsh> SELECT * FROM system_schema.keyspaces;
-> também mostra todos os keyspaces existentes... acho que prefiro esta tbh

cqlsh> USE tutorialspoint;
-> comando para usar um keyspace específico já criado anteriormente

cqlsh:test> ALTER KEYSPACE test  WITH replication = {'class':'NetworkTopologyStrategy', 'replication_factor' : 3};
-> alterar o keyspace (nomeadamente as opções do replication)
-> também dá para alterar o durable_writes - cqlsh:test> ALTER KEYSPACE test WITH  DURABLE_WRITES = true; (não precisas de meter obrigatoriamente o REPLICATION, ou seja, são dois parâmetros independentes)

-> interessante, CASSANDRA não é case-sensitive, nem no nome dos keyspaces

cqlsh> DROP KEYSPACE tutorial;
-> eliminar um keyspace




BIBLIOGRAFIA

https://docs.datastax.com/en/cql-oss/3.1/cql/cql_reference/create_keyspace_r.html
https://www.quora.com/What-is-the-meaning-of-Rack-Awareness-in-Hadoop
https://www.oreilly.com/library/view/learning-apache-cassandra/9781787127296/1b85246c-2713-44ae-a9c2-7971f4915555.xhtml
https://www.tutorialspoint.com/cassandra/cassandra_create_keyspace.htm
https://docs.datastax.com/en/cassandra-oss/3.x/cassandra/architecture/archDataDistributeReplication.html



